/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.iml.extendedIML.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.iml.extendedIML.DirImporter;
import org.xtext.example.iml.extendedIML.ExtendedIMLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dir Importer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.iml.extendedIML.impl.DirImporterImpl#getPathDir <em>Path Dir</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DirImporterImpl extends ImporterImpl implements DirImporter
{
  /**
   * The default value of the '{@link #getPathDir() <em>Path Dir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathDir()
   * @generated
   * @ordered
   */
  protected static final String PATH_DIR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPathDir() <em>Path Dir</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPathDir()
   * @generated
   * @ordered
   */
  protected String pathDir = PATH_DIR_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DirImporterImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ExtendedIMLPackage.Literals.DIR_IMPORTER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPathDir()
  {
    return pathDir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPathDir(String newPathDir)
  {
    String oldPathDir = pathDir;
    pathDir = newPathDir;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ExtendedIMLPackage.DIR_IMPORTER__PATH_DIR, oldPathDir, pathDir));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ExtendedIMLPackage.DIR_IMPORTER__PATH_DIR:
        return getPathDir();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ExtendedIMLPackage.DIR_IMPORTER__PATH_DIR:
        setPathDir((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ExtendedIMLPackage.DIR_IMPORTER__PATH_DIR:
        setPathDir(PATH_DIR_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ExtendedIMLPackage.DIR_IMPORTER__PATH_DIR:
        return PATH_DIR_EDEFAULT == null ? pathDir != null : !PATH_DIR_EDEFAULT.equals(pathDir);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pathDir: ");
    result.append(pathDir);
    result.append(')');
    return result.toString();
  }

} //DirImporterImpl
